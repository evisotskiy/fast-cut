{"version":3,"sources":["hooks/http.hook.js","pages/CreatePage.js","pages/AuthPage.js","hooks/message.hook.js","components/Loader.js","components/LinksList.js","pages/LinksPage.js","components/LinkCard.js","pages/DetailPage.js","components/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js","context/auth.context.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","async","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","CreatePage","history","useHistory","auth","useContext","AuthContext","link","setLink","pressHandler","e","key","from","Authorization","token","push","_id","useEffect","global","M","updateTextFields","className","style","paddingTop","placeholder","id","name","type","onChange","target","value","onKeyPress","htmlFor","AuthPage","useMessage","email","password","form","setForm","changeHandler","marginRight","onClick","login","userId","disabled","text","toast","html","Loader","display","justifyContent","LinksList","links","length","map","index","to","LinksPage","setLinks","fetchLinks","fetched","LinkCard","href","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","Navbar","logoutHandler","preventDefault","logout","padding","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","isAuthenticated","routes","path","exact","useRoutes","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","noop","createContext"],"mappings":"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","file":"static/js/main.d4a099ef.chunk.js","sourcesContent":["import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null)\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, { method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Something went wrong')\r\n            }\r\n\r\n            return data\r\n\r\n        } catch (e) {\r\n            setError(e.message)\r\n            throw(e)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return { loading, error, request, clearError}\r\n}","import React, { useCallback, useEffect, useState, useContext } from 'react'\r\nimport { useHttp } from './../hooks/http.hook';\r\nimport { AuthContext } from './../context/auth.context';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const CreatePage = () => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n    const {request} = useHttp()\r\n    const [link, setLink] = useState('')\r\n\r\n    const pressHandler = useCallback(async (e) => {\r\n        if (e.key === 'Enter') {\r\n            try {\r\n                const data = await request('/api/link/generate', 'POST', {from: link}, {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                })\r\n                history.push(`/detail/${data.link._id}`)\r\n            } catch {\r\n\r\n            }\r\n        }\r\n    }, [auth.token, link, request, history])\r\n\r\n    useEffect(() => global.M.updateTextFields(), [])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s8 offset-s2\" style={{paddingTop: '2rem'}}>\r\n\r\n                <div className=\"input-field \">\r\n                    <input\r\n                        placeholder=\"Enter link\"\r\n                        id=\"link\"\r\n                        name=\"link\"\r\n                        type=\"text\"\r\n                        className=\"validate\"\r\n                        onChange={e => setLink(e.target.value)}\r\n                        onKeyPress={pressHandler}\r\n                    />\r\n                    <label htmlFor=\"link\">Link</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useHttp } from './../hooks/http.hook';\r\nimport { useMessage } from './../hooks/message.hook';\r\nimport { AuthContext } from './../context/auth.context';\r\n\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    const message = useMessage()\r\n    const { loading, error, request, clearError } = useHttp()\r\n    const [form, setForm] = useState({\r\n        email: '', password: ''\r\n    })\r\n\r\n    const changeHandler = e => {\r\n        setForm({ ...form, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/register', 'POST', {...form})\r\n            message(data.message)\r\n        } catch {}\r\n    }\r\n\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request('/api/auth/login', 'POST', {...form})\r\n            auth.login(data.token, data.userId)\r\n        } catch {}\r\n    }\r\n\r\n    useEffect(() => {\r\n        message(error)\r\n        clearError()\r\n    }, [error, message, clearError])\r\n\r\n    useEffect(() => global.M.updateTextFields(), [])\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s6 offset-s3\">\r\n                <h1>Link cutter</h1>\r\n\r\n                <div className=\"card blue darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">Authorization</span>\r\n                        <div>\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    placeholder=\"Enter email\"\r\n                                    id=\"email\"\r\n                                    name=\"email\"\r\n                                    type=\"text\"\r\n                                    className=\"yellow-input validate\"\r\n                                    value={form.email}\r\n                                    onChange={ changeHandler }\r\n                                />\r\n                                <label htmlFor=\"email\">Email</label>\r\n                            </div>\r\n                            <div className=\"input-field \">\r\n                                <input\r\n                                    placeholder=\"Enter password\"\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    className=\"yellow-input validate\"\r\n                                    value={form.password}\r\n                                    onChange={ changeHandler }\r\n                                />\r\n                                <label htmlFor=\"password\">Password</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-action\">\r\n                        <button className=\"btn yellow darken-4\" style={{ marginRight: 10 }} onClick={loginHandler} disabled={loading}>Login</button>\r\n                        <button className=\"btn grey lighten-1 black-text\" onClick={registerHandler} disabled={loading}>Registration</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useCallback } from \"react\"\r\n\r\nexport const useMessage = () => {\r\n    return useCallback((text) => {\r\n        if (global.M && text) {\r\n            global.M.toast({html: text})\r\n        }\r\n    }, [])\r\n}","import React from 'react';\r\n\r\nexport const Loader = () => (\r\n    <div style={{display: 'flex', justifyContent: 'center', paddingTop: '2rem'}}>\r\n        <div className=\"preloader-wrapper active\">\r\n            <div className=\"spinner-layer spinner-red-only\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\" />\r\n                </div><div className=\"gap-patch\">\r\n                    <div className=\"circle\" />\r\n                </div><div className=\"circle-clipper right\">\r\n                    <div className=\"circle\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const LinksList = ({ links }) => {\r\n    if (!links.length) {\r\n        return <p className=\"center\">There are no links</p>\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Original</th>\r\n                    <th>Shortcut</th>\r\n                    <th>Details</th>\r\n                </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n                {links.map((link, index) => (\r\n                    <tr key={link._id}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{link.from}</td>\r\n                        <td>{link.to}</td>\r\n                        <td><Link to={`/detail/${link._id}`}>View details</Link></td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React, { useState, useContext, useEffect } from 'react'\r\nimport { useHttp } from './../hooks/http.hook';\r\nimport { AuthContext } from './../context/auth.context';\r\nimport { useCallback } from 'react';\r\nimport { Loader } from './../components/Loader';\r\nimport { LinksList } from './../components/LinksList';\r\n\r\nexport const LinksPage = () => {\r\n    const [links, setLinks] = useState([])\r\n    const {loading, request} = useHttp()\r\n    const {token} = useContext(AuthContext)\r\n\r\n    const fetchLinks = useCallback( async () => {\r\n        try {\r\n            const fetched = await request('/api/link', 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLinks(fetched)\r\n        } catch {}\r\n    }, [token, request])\r\n\r\n    useEffect(() => {\r\n        fetchLinks()\r\n    }, [fetchLinks])\r\n\r\n    if (loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    return <LinksList links={links} />\r\n}\r\n","import React from 'react';\r\n\r\nexport const LinkCard = ({link}) => {\r\n    return (\r\n        <>\r\n            <h2>Link</h2>\r\n\r\n            <p>Original: <a href={link.from} target=\"_blank\" rel=\"noopener noreferrer\">{link.from}</a></p>\r\n            <p>Shortcut: <a href={link.to} target=\"_blank\" rel=\"noopener noreferrer\">{link.to}</a></p>\r\n            <p>Link clicks amount: <strong>{link.clicks}</strong></p>\r\n            <p>Creation date: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useCallback } from 'react';\r\nimport { useHttp } from './../hooks/http.hook';\r\nimport { AuthContext } from './../context/auth.context';\r\nimport { Loader } from './../components/Loader';\r\nimport { LinkCard } from './../components/LinkCard';\r\n\r\nexport const DetailPage = () => {\r\n    const {token} = useContext(AuthContext)\r\n    const {request, loading} = useHttp()\r\n    const [link, setLink] = useState(null)\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async () => {\r\n        try {\r\n            const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\r\n                Authorization: `Bearer ${token}`\r\n            })\r\n            setLink(fetched)\r\n        } catch {}\r\n    }, [token, linkId, request])\r\n\r\n    useEffect(() => {\r\n        getLink()\r\n    }, [getLink])\r\n\r\n    if (loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {link && <LinkCard link={link} />}\r\n        </>\r\n    )\r\n}\r\n","import React, { useCallback, useContext } from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport { AuthContext } from './../context/auth.context';\r\n\r\nexport const Navbar = () => {\r\n    const history = useHistory()\r\n    const auth = useContext(AuthContext)\r\n\r\n    const logoutHandler = useCallback((e) => {\r\n        e.preventDefault();\r\n        auth.logout()\r\n        history.push('/')\r\n    }, [auth, history])\r\n\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper blue darken-1\" style={{ padding: '0 2rem' }}>\r\n                <span className=\"brand-logo\">Links cutter</span>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><NavLink to=\"/create\">Create</NavLink></li>\r\n                    <li><NavLink to=\"/links\">Your links</NavLink></li>\r\n                    <li><a href=\"/\" onClick={logoutHandler}>Logout</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport \"materialize-css\";\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/auth.context';\nimport { Navbar } from './components/Navbar';\nimport { Loader } from './components/Loader';\n\nfunction App() {\n  const {token, login, logout, userId, ready} = useAuth()\n  const isAuthenticated = !!token;\n  const routes = useRoutes(isAuthenticated)\n\n  if (!ready) {\n    return <Loader />\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      token, login, logout, userId, isAuthenticated\n    }}>\n      <BrowserRouter>\n        { isAuthenticated && <Navbar /> }\n        <div className=\"container\">\n          {routes}\n        </div>\n      </BrowserRouter>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(null)\r\n    const [ready, setReady] = useState(false)\r\n    const [userId, setUserId] = useState(null)\r\n\r\n    const login = useCallback((jwtToken, id) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n\r\n        localStorage.setItem(storageName, JSON.stringify({ token: jwtToken, userId: id }))\r\n    }, [])\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token) {\r\n            login(data.token, data.userId)\r\n        }\r\n        setReady(true)\r\n    }, [login])\r\n\r\n    return {login, logout, token, userId, ready}\r\n}","import React from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport { LinksPage } from './pages/LinksPage';\r\nimport { CreatePage } from './pages/CreatePage';\r\nimport { DetailPage } from './pages/DetailPage';\r\nimport { AuthPage } from './pages/AuthPage';\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/links\" exact>\r\n                    <LinksPage />\r\n                </Route>\r\n                <Route path=\"/create\" exact>\r\n                    <CreatePage />\r\n                </Route>\r\n                <Route path=\"/detail/:id\">\r\n                    <DetailPage />\r\n                </Route>\r\n                <Redirect to=\"/create\" />\r\n            </Switch>\r\n        )\r\n    }\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <AuthPage />\r\n            </Route>\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createContext } from \"react\";\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n})"],"sourceRoot":""}